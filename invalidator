#!/usr/local/bin/ruby

require 'openssl'
require 'base64'
require 'httparty'
require 'builder'
require 'optparse'

options = {}
opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: invalidator [options]"
  opts.separator  ""
  opts.separator  "Options"
  opts.on("-p","--path PATH","Path to Invalidate") do |p|
    options[:path]  = p
  end
  opts.on("-h","--host HOST","Level 3 Hostname") do |h|
    options[:host]  = h
  end
end

begin
  opt_parser.parse!
  mandatory = [:path,:host]
  missing = mandatory.select{ |param| options[param].nil? }
  if not missing.empty?
    puts "Missing Options: #{missing.join(', ')}"
    puts opt_parser
    exit
  end
rescue OptionParser::InvalidOption, OptionParser::MissingArgument
  puts $!.to_s
  puts opt_parser
  exit
end

date = Time.new.gmtime
date_header = date.strftime("%a" + "," + "\s" + "%d" + "\s" + "%b" + "\s" + "%Y" + "\s" + "%H:%M:%S" + "\s" + "%Z")
http_content_type = "text/xml"
l3_host = options[:host]

# Read in the key, secret, and scope from external file so it is not exposed in the script.
def account
  hash ={}
  File.open('secretfile', 'r') do |f|
    f.each_line do |line|
      hkey, hvalue = line.chomp.split("=")
      hash[hkey] = hvalue
    end
  end
  return hash
end

invalidate_url = "https://mediaportal.level3.com:443/api/v1.0/invalidations/" + account["scope"] + "/" + l3_host
secret = account["secret"]
key = account["key"]

xml_req = ''
x = Builder::XmlMarkup.new(:target => xml_req, :indent => 1)
x.instruct!
x.paths {
  x.path options[:path]
}

# Build authentication header.
signature_data = date_header + "\n" + invalidate_url + "\n" + http_content_type + "\n" + "POST" + "\n" + ""
encoded_hash = Base64.encode64(OpenSSL::HMAC.digest( 'sha1', secret , signature_data ))
auth_header = "MPA" + "\s" + key + ":" + encoded_hash

class Http
  include HTTParty
  debug_output $stdout
end

Http.post(invalidate_url,
    :query => { :force => "true",
                :ignoreCase => "false"},
    :headers => { "Authorization" => auth_header,
                  "Date" => date_header,
                  "Content-Type" => http_content_type,
                  "Content-MD5" => ""},
    :body => xml_req
)